/*
 * Copyright (c) Sandflow Consulting, LLC
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
* @author Pierre-Anthony Lemieux
*/

package com.sandflow.smpte.mxf.types;

import java.io.IOException;

{{#if members}}import com.sandflow.smpte.klv.Triplet;
import com.sandflow.smpte.util.AUID;
import com.sandflow.smpte.mxf.SetItemAdapter;{{/if}}
import com.sandflow.smpte.util.UL;
import com.sandflow.smpte.mxf.ClassFactory;
import com.sandflow.smpte.mxf.MXFInputContext;
import com.sandflow.smpte.mxf.MXFInputStream;
import com.sandflow.smpte.mxf.MXFOutputContext;
import com.sandflow.smpte.mxf.MXFOutputStream;
import com.sandflow.smpte.klv.Set;

/**
  * {{#if isAbstract}}<<abstract>> {{/if}}{{className}}
  *{{#each members}}
  *   - {{symbol}} : {{typeDefinition}}{{#if isOptional}} [0..1]{{/if}}{{/each}}
  */
public {{#if isAbstract}}abstract {{/if}}class {{className}}{{#if parentClassName}} extends {{parentClassName}}{{/if}} {
  private static final UL KEY = UL.fromURN("{{identification}}");
  public static final int ITEM_LENGTH = 16;
{{#each members}}{{#unless isInherited}}
  private static final AUID {{symbol}}_AUID = AUID.fromURN("{{identification}}");{{/unless}}{{/each}}
{{#each members}}{{#unless isInherited}}
  /**
    * {{{description}}}
    */
  public {{typeName}} {{symbol}};
{{/unless}}{{/each}}

  void readFromSet(Set s, MXFInputContext ctx) throws IOException {
{{#if parentClassName}}
    super.readFromSet(s, ctx);
{{/if}}
{{#if members}}
    Triplet t;
{{#each members}}{{#unless isInherited}}
    if ((t = s.getItem({{symbol}}_AUID)) != null) {
      this.{{symbol}} = {{adapterName}}.fromStream(new MXFInputStream(t.getValueAsStream()), ctx);
    }
{{/unless}}{{/each}}
{{/if}}
  }
  public static {{className}} fromSet(Set s, MXFInputContext ctx) {
    Class<?> clazz = ClassFactory.getClass(s.getKey());
    if (clazz == null) {
      return null;
    }
    try {
      {{className}} obj;
      obj = ({{className}}) clazz.getConstructor().newInstance();
      obj.readFromSet(s, ctx);
      return obj;
    } catch (Exception e) {
      /* TODO: log error */
    }

    return null;
  }

  public static {{className}} fromStream(MXFInputStream is, MXFInputContext ctx) throws IOException {
    try {
      var uuid = is.readUUID();
      var s = ctx.getSet(uuid);
      if (s == null)
        return null;

      return {{className}}.fromSet(s, ctx);
    } catch (Exception e) {
      /* TODO: log error */
      System.err.println(e.getMessage());
    }

    return null;
  }

  void writeToSet(Set s, MXFOutputContext ctx) throws IOException {
{{#if parentClassName}}
    super.writeToSet(s, ctx);{{/if}}
{{#each members}}{{#unless isInherited}}
    SetItemAdapter.toSetItem(this.{{symbol}}, {{symbol}}_AUID, {{adapterName}}::toStream, s, ctx);{{/unless}}{{/each}}
  }

  public void serialize(MXFOutputContext ctx) throws IOException {
    Set s = new Set(KEY);
    this.writeToSet(s, ctx);
    ctx.putSet(s);
  }

  public static void toStream({{className}} value, MXFOutputStream mos, MXFOutputContext ctx) throws IOException {
    mos.writeUUID(value.InstanceID);
    value.serialize(ctx);
  }

  /**
    * Returns the Set Key
    *
    * @return UL Key
    */
  public static UL getKey() {
    return KEY;
  }

}