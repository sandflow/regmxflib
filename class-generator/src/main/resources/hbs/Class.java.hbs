/*
 * Copyright (c) Sandflow Consulting, LLC
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
* @author Pierre-Anthony Lemieux
*/

package com.sandflow.smpte.mxf.types;

import java.io.IOException;

{{#if ownMembers}}import com.sandflow.smpte.klv.Triplet;
import com.sandflow.smpte.util.AUID;
import com.sandflow.smpte.mxf.SetItemAdapter;{{/if}}
import com.sandflow.smpte.util.UL;
import com.sandflow.smpte.util.UUID;
import com.sandflow.smpte.mxf.ClassFactory;
import com.sandflow.smpte.mxf.MXFInputContext;
import com.sandflow.smpte.mxf.MXFDataInput;
import com.sandflow.smpte.mxf.MXFOutputContext;
import com.sandflow.smpte.mxf.MXFDataOutput;
import com.sandflow.smpte.mxf.MXFException;
import com.sandflow.smpte.mxf.RegMXFEvent;
import com.sandflow.smpte.klv.Set;


/**
  * {{#if isAbstract}}<<abstract>> {{/if}}{{className}}
  *{{#each allMembers}}
  *   - {{symbol}} : {{typeDefinition}}{{#if isOptional}} [0..1]{{/if}}{{/each}}
  */
public {{#if isAbstract}}abstract {{/if}}class {{className}}{{#if parentClassName}} extends {{parentClassName}}{{/if}} {
  private static final UL KEY = UL.fromURN("{{identification}}");
  public static final int ITEM_LENGTH = 16;
{{#each ownMembers}}
  private static final AUID {{symbol}}_AUID = AUID.fromURN("{{identification}}");{{/each}}
{{#each ownMembers}}
  /**
    * {{{description}}}
    */
  public {{typeName}} {{symbol}};
{{/each}}

  {{#if isAbstract}}protected {{/if}}{{#unless isAbstract}}public {{/unless}}{{className}}({{className}} other) {
    {{#if parentClassName}}super(other);{{/if}}
{{#each ownMembers}}
    this.{{symbol}} = {{adapterName}}.copyOf(other.{{symbol}});
{{/each}}
  }

  {{#if isAbstract}}protected {{/if}}{{#unless isAbstract}}public {{/unless}}{{className}}() {
    {{#if parentClassName}}super();{{/if}}
  }

{{#unless isAbstract}}
  public {{className}} copyOf() {
    return new {{className}}(this);
  } 
{{/unless}}

{{#if isAbstract}}
  public abstract {{className}} copyOf();
{{/if}}


  public static {{className}} copyOf({{className}} obj) {
    if (obj == null) {
      return null;
    }
    return obj.copyOf();
  }

  void readFromSet(Set s, MXFInputContext ctx) throws MXFException {
{{#if parentClassName}}
    super.readFromSet(s, ctx);
{{/if}}
{{#if ownMembers}}
    Triplet t;{{/if}}
{{#each ownMembers}}
    try {
      if ((t = s.getItem({{symbol}}_AUID)) != null) {
        this.{{symbol}} = {{adapterName}}.fromStream(new MXFDataInput(t.getValueAsStream()), ctx);
      }
    } catch (IOException e) {
      ctx.handleEvent(new RegMXFEvent(
        RegMXFEvent.EventCodes.ITEM_READ_FAILED,
        "Reading item {{symbol}} from Set "+ s.getKey().toString() + " failed"));
    }
{{/each}}

  }
  public static {{className}} fromSet(Set s, MXFInputContext ctx) throws MXFException {
    if (s == null) {
      throw new IllegalArgumentException("Cannot read from an empty Set");
    }
    Class<?> clazz = ClassFactory.getClass(s.getKey());
    if (clazz == null) {
      ctx.handleEvent(new RegMXFEvent(
        RegMXFEvent.EventCodes.CLASS_NOT_FOUND,
        "Class not found: "+ s.getKey().toString()));
      return null;
    }

    {{className}} obj;
    try {
      obj = ({{className}}) clazz.getConstructor().newInstance();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }

    obj.readFromSet(s, ctx);
    return obj;
  }

  public static {{className}} fromStream(MXFDataInput is, MXFInputContext ctx) throws IOException, MXFException {
    UUID uuid = is.readUUID();

    var s = ctx.getSet(uuid);
    if (s == null) {
      ctx.handleEvent(new RegMXFEvent(
              RegMXFEvent.EventCodes.MISSING_HEADER_SET,
              "Cannot find header metadata set " + uuid));
      return null;
    }

    return {{className}}.fromSet(s, ctx);
  }

  void addItemsToSet(Set s, MXFOutputContext ctx) throws IOException {
{{#if parentClassName}}
    super.addItemsToSet(s, ctx);{{/if}}
{{#each ownMembers}}
    SetItemAdapter.toSetItem(this.{{symbol}}, {{symbol}}_AUID, {{adapterName}}::toStream, s, ctx);{{/each}}
  }

  public void toSet(MXFOutputContext ctx) throws IOException {
    Set s = new Set(KEY);
    this.addItemsToSet(s, ctx);
    ctx.putSet(s);
  }

  public static void toStream({{className}} value, MXFDataOutput mos, MXFOutputContext ctx) throws IOException {
    mos.writeUUID(value.InstanceID);
    value.toSet(ctx);
  }

  /**
    * Returns the Set Key
    *
    * @return UL Key
    */
  public static UL getKey() {
    return KEY;
  }

}