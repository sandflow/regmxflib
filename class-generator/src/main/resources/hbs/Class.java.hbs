/*
 * Copyright (c) Sandflow Consulting, LLC
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
* @author Pierre-Anthony Lemieux
*/

package com.sandflow.smpte.mxf.types;

import com.sandflow.smpte.klv.Triplet;
import com.sandflow.smpte.mxf.ClassFactory;
import com.sandflow.smpte.mxf.MXFInputContext;
import com.sandflow.smpte.mxf.MXFInputStream;
import com.sandflow.smpte.mxf.Set;
import com.sandflow.smpte.util.AUID;

public {{#if isAbstract}}abstract {{/if}}class {{className}}{{#if parentClassName}} extends {{parentClassName}}{{/if}} {

{{#each members}}
  public {{typeName}} {{symbol}};
{{/each}}

{{#unless isAbstract}}
  void readFromSet(Set s, MXFInputContext ctx) {
    super.readFromSet(s, ctx);
{{#if members}}

    Triplet t;

{{#each members}}
    final AUID {{symbol}}_AUID = AUID.fromURN("{{identification}}");
    t = s.getItem({{symbol}}_AUID);
    if (t != null) {
      this.{{symbol}} = {{adapterName}}.fromStream(new MXFInputStream(t.getValueAsStream()), ctx);
    }
{{/each}}
{{/if}}
  }

  public static {{className}} fromSet(Set s, MXFInputContext ctx) {
    var obj = new {{className}}();
    obj.readFromSet(s, ctx);
    return obj;
  }

  public static {{className}} fromStream(MXFInputStream is, MXFInputContext ctx) {
    try {
      var uuid = is.readUUID();
      var s = ctx.getSet(uuid);
      if (s == null)
        return null;

      return {{className}}.fromSet(s, ctx);
    } catch (Exception e) {
      /* TODO: log error */
      System.err.println(e.getMessage());
    }

    return null;
  }
{{/unless}}

}