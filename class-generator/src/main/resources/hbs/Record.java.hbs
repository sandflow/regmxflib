/*
 * Copyright (c) Sandflow Consulting, LLC
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
* @author Pierre-Anthony Lemieux
*/

package com.sandflow.smpte.mxf.types;

import java.io.IOException;

import com.sandflow.smpte.mxf.MXFDataInput;
import com.sandflow.smpte.mxf.MXFInputContext;
import com.sandflow.smpte.mxf.MXFDataOutput;
import com.sandflow.smpte.mxf.MXFException;
import com.sandflow.smpte.mxf.MXFOutputContext;

public class {{name}} {
  {{#unless isVariableLength}}public static final Integer ITEM_LENGTH = {{#each members}}{{memberAdapterName}}.ITEM_LENGTH{{#unless @last}} + {{/unless}}{{/each}};{{/unless}}
{{#each members}}
  public {{memberTypeName}} {{memberName}};{{/each}}

  public static {{name}} fromStream(MXFDataInput is, MXFInputContext ctx)  throws IOException, MXFException {
    var r = new {{name}}();
{{#each members}}
    r.{{memberName}} = {{memberAdapterName}}.fromStream(is, ctx);{{/each}}

    return r;
  }

  public {{name}}() {
  }

  public {{name}}({{#each members}}{{memberTypeName}} {{memberName}}{{#unless @last}}, {{/unless}}{{/each}}) {
{{#each members}}
    this.{{memberName}} = {{memberName}};{{/each}}
  }

  public static void toStream({{name}} value, MXFDataOutput os, MXFOutputContext ctx)  throws IOException, MXFException {
{{#each members}}
    {{memberAdapterName}}.toStream(value.{{memberName}}, os, ctx);{{/each}}
  }

  public static {{name}} copyOf({{name}} src) {
    if (src == null) {
      return null;
    }
    var dst = new {{name}}();
{{#each members}}
    dst.{{memberName}} = {{memberAdapterName}}.copyOf(src.{{memberName}});{{/each}}    
    return dst;
  }

}